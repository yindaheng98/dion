// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: proto/isglb.proto

package proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	ion "github.com/pion/ion/proto/ion"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The track with id `trackId` from `src` node was/should forwarded
type ForwardTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src     *ion.Node `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	TrackId string    `protobuf:"bytes,2,opt,name=trackId,proto3" json:"trackId,omitempty"` // The same video/audio has the same track id in different nodes
}

func (x *ForwardTrack) Reset() {
	*x = ForwardTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardTrack) ProtoMessage() {}

func (x *ForwardTrack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardTrack.ProtoReflect.Descriptor instead.
func (*ForwardTrack) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{0}
}

func (x *ForwardTrack) GetSrc() *ion.Node {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *ForwardTrack) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

// The track with id `srcTrackId` in the current node was/should proceeded and output track's name is `dstTrackId`
type ProceedTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcTrackId string `protobuf:"bytes,1,opt,name=srcTrackId,proto3" json:"srcTrackId,omitempty"`
	DstTrackId string `protobuf:"bytes,2,opt,name=dstTrackId,proto3" json:"dstTrackId,omitempty"`
	Procedure  string `protobuf:"bytes,3,opt,name=procedure,proto3" json:"procedure,omitempty"` //src track should be proceeded by what kind of procedure
}

func (x *ProceedTrack) Reset() {
	*x = ProceedTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProceedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProceedTrack) ProtoMessage() {}

func (x *ProceedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProceedTrack.ProtoReflect.Descriptor instead.
func (*ProceedTrack) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{1}
}

func (x *ProceedTrack) GetSrcTrackId() string {
	if x != nil {
		return x.SrcTrackId
	}
	return ""
}

func (x *ProceedTrack) GetDstTrackId() string {
	if x != nil {
		return x.DstTrackId
	}
	return ""
}

func (x *ProceedTrack) GetProcedure() string {
	if x != nil {
		return x.Procedure
	}
	return ""
}

// Which session do the client need. May be a lot of track in one session
type ClientNeededSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *ClientNeededSession) Reset() {
	*x = ClientNeededSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientNeededSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNeededSession) ProtoMessage() {}

func (x *ClientNeededSession) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNeededSession.ProtoReflect.Descriptor instead.
func (*ClientNeededSession) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{2}
}

func (x *ClientNeededSession) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

// TODO: move SFUStatus to SFU module
type SFUStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SFU                 *ion.Node              `protobuf:"bytes,1,opt,name=SFU,proto3" json:"SFU,omitempty"`
	ForwardTracks       []*ForwardTrack        `protobuf:"bytes,2,rep,name=forwardTracks,proto3" json:"forwardTracks,omitempty"`
	ProceedTracks       []*ProceedTrack        `protobuf:"bytes,3,rep,name=proceedTracks,proto3" json:"proceedTracks,omitempty"`
	ClientNeededSession []*ClientNeededSession `protobuf:"bytes,4,rep,name=clientNeededSession,proto3" json:"clientNeededSession,omitempty"`
}

func (x *SFUStatus) Reset() {
	*x = SFUStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFUStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFUStatus) ProtoMessage() {}

func (x *SFUStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFUStatus.ProtoReflect.Descriptor instead.
func (*SFUStatus) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{3}
}

func (x *SFUStatus) GetSFU() *ion.Node {
	if x != nil {
		return x.SFU
	}
	return nil
}

func (x *SFUStatus) GetForwardTracks() []*ForwardTrack {
	if x != nil {
		return x.ForwardTracks
	}
	return nil
}

func (x *SFUStatus) GetProceedTracks() []*ProceedTrack {
	if x != nil {
		return x.ProceedTracks
	}
	return nil
}

func (x *SFUStatus) GetClientNeededSession() []*ClientNeededSession {
	if x != nil {
		return x.ClientNeededSession
	}
	return nil
}

type EdgeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src    *ion.Node `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst    *ion.Node `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Report *any.Any  `protobuf:"bytes,3,opt,name=report,proto3" json:"report,omitempty"` //TODO: Add a more specific Report type
}

func (x *EdgeReport) Reset() {
	*x = EdgeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeReport) ProtoMessage() {}

func (x *EdgeReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeReport.ProtoReflect.Descriptor instead.
func (*EdgeReport) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{4}
}

func (x *EdgeReport) GetSrc() *ion.Node {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *EdgeReport) GetDst() *ion.Node {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *EdgeReport) GetReport() *any.Any {
	if x != nil {
		return x.Report
	}
	return nil
}

type NodeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node   *ion.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Report *any.Any  `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"` //TODO: Add a more specific Report type
}

func (x *NodeReport) Reset() {
	*x = NodeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReport) ProtoMessage() {}

func (x *NodeReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReport.ProtoReflect.Descriptor instead.
func (*NodeReport) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{5}
}

func (x *NodeReport) GetNode() *ion.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeReport) GetReport() *any.Any {
	if x != nil {
		return x.Report
	}
	return nil
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Report:
	//	*Report_EdgeReport
	//	*Report_NodeReport
	Report isReport_Report `protobuf_oneof:"report"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{6}
}

func (m *Report) GetReport() isReport_Report {
	if m != nil {
		return m.Report
	}
	return nil
}

func (x *Report) GetEdgeReport() *EdgeReport {
	if x, ok := x.GetReport().(*Report_EdgeReport); ok {
		return x.EdgeReport
	}
	return nil
}

func (x *Report) GetNodeReport() *NodeReport {
	if x, ok := x.GetReport().(*Report_NodeReport); ok {
		return x.NodeReport
	}
	return nil
}

type isReport_Report interface {
	isReport_Report()
}

type Report_EdgeReport struct {
	EdgeReport *EdgeReport `protobuf:"bytes,2,opt,name=edgeReport,proto3,oneof"`
}

type Report_NodeReport struct {
	NodeReport *NodeReport `protobuf:"bytes,3,opt,name=nodeReport,proto3,oneof"`
}

func (*Report_EdgeReport) isReport_Report() {}

func (*Report_NodeReport) isReport_Report() {}

type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*SyncRequest_Status
	//	*SyncRequest_Report
	Request isSyncRequest_Request `protobuf_oneof:"request"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_isglb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_isglb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_proto_isglb_proto_rawDescGZIP(), []int{7}
}

func (m *SyncRequest) GetRequest() isSyncRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SyncRequest) GetStatus() *SFUStatus {
	if x, ok := x.GetRequest().(*SyncRequest_Status); ok {
		return x.Status
	}
	return nil
}

func (x *SyncRequest) GetReport() *Report {
	if x, ok := x.GetRequest().(*SyncRequest_Report); ok {
		return x.Report
	}
	return nil
}

type isSyncRequest_Request interface {
	isSyncRequest_Request()
}

type SyncRequest_Status struct {
	Status *SFUStatus `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type SyncRequest_Report struct {
	Report *Report `protobuf:"bytes,2,opt,name=report,proto3,oneof"`
}

func (*SyncRequest_Status) isSyncRequest_Request() {}

func (*SyncRequest_Report) isSyncRequest_Request() {}

var File_proto_isglb_proto protoreflect.FileDescriptor

var file_proto_isglb_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x73, 0x67, 0x6c, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x69, 0x73, 0x6c, 0x62, 0x1a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a,
	0x0c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a,
	0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x09, 0x53, 0x46, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x03, 0x53, 0x46, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x53, 0x46, 0x55, 0x12, 0x38,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x74, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x59, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x7a, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32,
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x0b,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x73,
	0x6c, 0x62, 0x2e, 0x53, 0x46, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x42, 0x0a, 0x05, 0x49, 0x53, 0x47,
	0x4c, 0x42, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x46, 0x55, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x69, 0x73, 0x6c, 0x62, 0x2e, 0x53, 0x46,
	0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x24, 0x5a,
	0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x69, 0x6e, 0x64,
	0x61, 0x68, 0x65, 0x6e, 0x67, 0x39, 0x38, 0x2f, 0x69, 0x73, 0x67, 0x6c, 0x62, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_isglb_proto_rawDescOnce sync.Once
	file_proto_isglb_proto_rawDescData = file_proto_isglb_proto_rawDesc
)

func file_proto_isglb_proto_rawDescGZIP() []byte {
	file_proto_isglb_proto_rawDescOnce.Do(func() {
		file_proto_isglb_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_isglb_proto_rawDescData)
	})
	return file_proto_isglb_proto_rawDescData
}

var file_proto_isglb_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_isglb_proto_goTypes = []interface{}{
	(*ForwardTrack)(nil),        // 0: islb.ForwardTrack
	(*ProceedTrack)(nil),        // 1: islb.ProceedTrack
	(*ClientNeededSession)(nil), // 2: islb.ClientNeededSession
	(*SFUStatus)(nil),           // 3: islb.SFUStatus
	(*EdgeReport)(nil),          // 4: islb.EdgeReport
	(*NodeReport)(nil),          // 5: islb.NodeReport
	(*Report)(nil),              // 6: islb.Report
	(*SyncRequest)(nil),         // 7: islb.SyncRequest
	(*ion.Node)(nil),            // 8: ion.Node
	(*any.Any)(nil),             // 9: google.protobuf.Any
}
var file_proto_isglb_proto_depIdxs = []int32{
	8,  // 0: islb.ForwardTrack.src:type_name -> ion.Node
	8,  // 1: islb.SFUStatus.SFU:type_name -> ion.Node
	0,  // 2: islb.SFUStatus.forwardTracks:type_name -> islb.ForwardTrack
	1,  // 3: islb.SFUStatus.proceedTracks:type_name -> islb.ProceedTrack
	2,  // 4: islb.SFUStatus.clientNeededSession:type_name -> islb.ClientNeededSession
	8,  // 5: islb.EdgeReport.src:type_name -> ion.Node
	8,  // 6: islb.EdgeReport.dst:type_name -> ion.Node
	9,  // 7: islb.EdgeReport.report:type_name -> google.protobuf.Any
	8,  // 8: islb.NodeReport.node:type_name -> ion.Node
	9,  // 9: islb.NodeReport.report:type_name -> google.protobuf.Any
	4,  // 10: islb.Report.edgeReport:type_name -> islb.EdgeReport
	5,  // 11: islb.Report.nodeReport:type_name -> islb.NodeReport
	3,  // 12: islb.SyncRequest.status:type_name -> islb.SFUStatus
	6,  // 13: islb.SyncRequest.report:type_name -> islb.Report
	7,  // 14: islb.ISGLB.SyncSFUStatus:input_type -> islb.SyncRequest
	3,  // 15: islb.ISGLB.SyncSFUStatus:output_type -> islb.SFUStatus
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_isglb_proto_init() }
func file_proto_isglb_proto_init() {
	if File_proto_isglb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_isglb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_isglb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProceedTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_isglb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientNeededSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_isglb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFUStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_isglb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_isglb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_isglb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_isglb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_isglb_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Report_EdgeReport)(nil),
		(*Report_NodeReport)(nil),
	}
	file_proto_isglb_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SyncRequest_Status)(nil),
		(*SyncRequest_Report)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_isglb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_isglb_proto_goTypes,
		DependencyIndexes: file_proto_isglb_proto_depIdxs,
		MessageInfos:      file_proto_isglb_proto_msgTypes,
	}.Build()
	File_proto_isglb_proto = out.File
	file_proto_isglb_proto_rawDesc = nil
	file_proto_isglb_proto_goTypes = nil
	file_proto_isglb_proto_depIdxs = nil
}
